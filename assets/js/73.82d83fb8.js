(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{745:function(t,a,v){"use strict";v.r(a);var _=v(58),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"垃圾回收机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[t._v("#")]),t._v(" 垃圾回收机制")]),t._v(" "),v("h4",{attrs:{id:"基本思路"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本思路"}},[t._v("#")]),t._v(" 基本思路")]),t._v(" "),v("p",[t._v("确定哪个变量不再使用，然后释放它占用的内存。过程是周期性的，垃圾回收程序每隔一段时间就自动运行。")]),t._v(" "),v("h4",{attrs:{id:"垃圾回收策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收策略"}},[t._v("#")]),t._v(" 垃圾回收策略")]),t._v(" "),v("p",[t._v("最常用的策略是标记清理，不常用引用计数。")]),t._v(" "),v("p",[v("strong",[t._v("标记清理")]),t._v("：先标记所有，再去掉被引用变量的标记，剩余的就是待删除的，最后销毁带标记的。")]),t._v(" "),v("p",[v("strong",[t._v("引用计数")]),t._v("：引用时计数加一，被覆盖时减一。为0清除。严重问题：循环引用无法释放内存。")]),t._v(" "),v("h4",{attrs:{id:"性能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),v("p",[t._v("垃圾回收机制回周期运行，如果内存中分配很多变量会造成性能损失，因此时间调度很重要。")]),t._v(" "),v("h4",{attrs:{id:"内存管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[t._v("#")]),t._v(" 内存管理")]),t._v(" "),v("p",[t._v("优化内存最佳手段：")]),t._v(" "),v("ol",[v("li",[t._v("全局变量的解除引用")]),t._v(" "),v("li",[t._v("尽量使用let const")]),t._v(" "),v("li",[t._v("共享隐藏类，避免“先创建再补充”式的动态属性赋值，需要把不使用的属性设置为null")])]),t._v(" "),v("p",[t._v("内存泄漏原因：")]),t._v(" "),v("ol",[v("li",[t._v("意外的全局声明（被创建到window上了）")]),t._v(" "),v("li",[t._v("定时器的回调通过闭包引用外部变量")]),t._v(" "),v("li",[t._v("js闭包")])])])}),[],!1,null,null,null);a.default=s.exports}}]);