(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{716:function(e,t,n){"use strict";n.r(t);var a=n(58),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"理解vue递归组件-实现tree树形控件实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#理解vue递归组件-实现tree树形控件实例"}},[e._v("#")]),e._v(" 理解Vue递归组件，实现Tree树形控件实例~")]),e._v(" "),n("p",[e._v("思考了两天时间，准备仿照ant-design-vue实现一个基于vue的树形控件。主要用到了vue递归组件思想、input的CheckBox类型输入框的使用。")]),e._v(" "),n("h2",{attrs:{id:"需求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#需求"}},[e._v("#")]),e._v(" 需求")]),e._v(" "),n("ul",[n("li",[e._v("能够将传入的Json数据生成树形目录。")]),e._v(" "),n("li",[e._v("能够初始化选中节点。")]),e._v(" "),n("li",[e._v("能够手动选中节点，最终可将所有选中节点打印出来。")]),e._v(" "),n("li",[e._v("能够在初始化禁用节点。")]),e._v(" "),n("li",[e._v("能够折叠树形目录。")]),e._v(" "),n("li",[e._v("修改原生CheckBox样式。")])]),e._v(" "),n("h2",{attrs:{id:"实例截图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例截图"}},[e._v("#")]),e._v(" 实例截图")]),e._v(" "),n("p",[e._v("做好的树形控件如下所示，点击获取选中节点key将弹出所有选中的节点：\n"),n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/4/170a5a1f0b31d3fc?w=1100&h=1066&f=png&s=50660",alt:"在这里插入图片描述"}})]),e._v(" "),n("h2",{attrs:{id:"手把手实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#手把手实现"}},[e._v("#")]),e._v(" 手把手实现")]),e._v(" "),n("h3",{attrs:{id:"了解vue递归组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#了解vue递归组件"}},[e._v("#")]),e._v(" 了解Vue递归组件")]),e._v(" "),n("p",[e._v("在vue的文档（https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E9%80%92%E5%BD%92%E7%BB%84%E4%BB%B6）中说明组件是可以在它们自己的模板中调用自身的。但是他需要两个条件：")]),e._v(" "),n("ul",[n("li",[e._v("组件有name属性")]),e._v(" "),n("li",[e._v("递归调用需要有条件")])]),e._v(" "),n("p",[e._v("根据以上说明创建了基础树形控件tree.vue:")]),e._v(" "),n("h3",{attrs:{id:"全局变量-global-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局变量-global-js"}},[e._v("#")]),e._v(" 全局变量：global.js")]),e._v(" "),n("p",[e._v("在写组件获取节点内容是发现由于是递归组件，并不好拿到每级选中的节点。因此在这里创建global.js全局变量记录所有选中节点。也便于删除和加入节点。\n默认选中的节点如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const nodes = ['1', '1-1', '1-1-2', '1-2-2']\n\nexport default {\n  nodes\n}\n\n")])])]),n("p",[e._v("写好后需要在main.js上挂载。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import global from 'common/js/global'\nVue.prototype.$global = global\n")])])]),n("h3",{attrs:{id:"基础组件-递归组件-tree-vue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础组件-递归组件-tree-vue"}},[e._v("#")]),e._v(" 基础组件（递归组件）：tree.vue")]),e._v(" "),n("p",[e._v("说明：这里不需要再用components属性去声明自己了，有了name属性后直接在template中就可以调用名为name值的组件。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <ul class="ul-wrapper">                                    \x3c!-- 包裹层--\x3e\n    <li v-for="item in list" :key="item.key">                \x3c!-- 遍历--\x3e\n      <div>                                                  \x3c!-- 是否展开图标--\x3e\n          <img class="icon"\n            v-show="item.children"\n            @click="changeShow"\n            :src="require(`../../common/images/${imgUrl}`)"\n          >                                                  \x3c!-- CheckBox--\x3e\n        <input\n          type="checkbox"\n          :name="item.key"\n          @click="clickbox"\n          :checked="isChecked(item.key)"\n          :disabled="item.disabled"\n        >\n        <div class="checkbox-title">{{item.title}}</div>      \x3c!-- CheckBox内容--\x3e\n      </div>\n      <tree v-if="showChildren" :list="item.children"></tree> \x3c!-- 遍历children--\x3e\n    </li>\n  </ul>\n</template>\n\n<script type=\'text/ecmascript-6\'>\nexport default {\n  name: \'tree\',\n  props: {\n    list: { // 所有树节点\n      type: Array,\n      default: () => {\n        return []\n      }\n    }\n  },\n  data () {\n    return {\n      showChildren: true // 是否展开根目录\n    }\n  },\n  computed: { // computed属性计算展开图标\n    imgUrl () {\n      return this.showChildren ? \'down.png\' : \'right.png\'\n    }\n  },\n  methods: {\n    clickbox (e) { // 点击CheckBox时需要加入或删除已选中this.$global.nodes的节点数组中\n      const checked = e.target.checked\n      const key = e.target.name\n      const nodes = this.$global.nodes // this.$global.nodes是全局变量，便于递归组件记录选中节点\n      if (checked) {\n        if (!nodes.includes(key)) {\n          this.$global.nodes.push(key)\n        }\n      } else {\n        this.$global.nodes = nodes.filter((item) => {\n          return key !== item\n        })\n      }\n    },\n    changeShow () { // 点击是否展开根目录，当前状态取反即可\n      this.showChildren = !this.showChildren\n    },\n    isChecked (key) { // 查看是否已经存在于选中节点中\n      return this.$global.nodes.includes(key)\n    }\n  }\n}\n<\/script>\n\n<style lang="stylus">\n.ul-wrapper                            // ul包裹层，每层需要向右偏移30px\n  margin 10px 30px 0\n  .checkbox-title, .icon\n    display inline-block\n    vertical-align middle\n  .icon\n    margin-left -20px\n    height 18px\n    width 18px\n\ninput[type="checkbox"]                  // CheckBox样式修改\n  position relative\n  display inline-block\n  vertical-align middle\n  padding 0\n  margin-right 5px\n  height 18px\n  width 18px\n  border 1px solid #ccc\n  border-radius 3px\ninput[type="checkbox"]:checked::before // CheckBox选中状态时样式修改\n  position absolute\n  top 0\n  left 0\n  padding-left 2px\n  content: "\\2713";\n  height 15px\n  width 13px\n  font-size 12px\n  font-weight: bold;\n  background #1296db\n  color #fff\n  border-radius 3px\n  border 0\ninput[type="checkbox"]:disabled::before // CheckBox禁用状态时样式修改\n  position absolute\n  top 0\n  left 0\n  padding-left 2px\n  content: "";\n  height 15px\n  width 13px\n  font-size 12px\n  font-weight: bold;\n  background #ccc\n  color #fff\n  border-radius 3px\n  border 0\n</style>\n\n')])])]),n("h3",{attrs:{id:"应用组件-tree-apply-vue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用组件-tree-apply-vue"}},[e._v("#")]),e._v(" 应用组件 tree-apply.vue")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div class="tree-wrapper">\n    <div class="btn" @click="showNodes">\n      点击获取选中节点key\n    </div>\n    <Tree :list="treeData"></Tree>\n  </div>\n</template>\n\n<script type=\'text/ecmascript-6\'>\nimport Tree from \'base/tree\'\nexport default {\n  data () {\n    return {\n      treeData: []  // 全部节点\n    }\n  },\n  created () {\n    this.getData()\n  },\n  methods: {\n    getData () {\n      this.axios.get(\'/tree\').then((res) => { // 获取mock数据\n        this.treeData = res.data\n      })\n    },\n    showNodes () {\n      alert(this.$global.nodes)\n    }\n  },\n  components: {\n    Tree\n  }\n}\n<\/script>\n\n<style lang="stylus">\n.btn\n  margin 20px\n  text-align center\n</style>\n\n')])])]),n("h3",{attrs:{id:"mock数据tree-json"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mock数据tree-json"}},[e._v("#")]),e._v(" mock数据tree.json")]),e._v(" "),n("p",[e._v("这里采用了模拟数据的方法，mock的具体使用方法在我上一篇写的《better-scroll实现轮播图组件》中有提到：https://blog.csdn.net/qq_39083496/article/details/104259280")]),e._v(" "),n("ul",[n("li",[e._v('是否禁用CheckBox是根据 "disabled": "true",决定的。')]),e._v(" "),n("li",[e._v("title（必须）是显示的label名。")]),e._v(" "),n("li",[e._v("key（必须）才是真正的关键字，理解为最后提交时的必要字段。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[{\n    "title": "1",\n    "key": "1",\n    "children": [\n        {\n            "title": "1-1",\n            "key": "1-1",\n            "children": [\n                { "title": "1-1-1", "key": "1-1-1" },\n                { "title": "1-1-2", "key": "1-1-2" },\n                { "title": "1-1-3", "key": "1-1-3" }\n            ]\n        }, \n        {\n            "title": "1-2",\n            "key": "1-2",\n            "children": [\n                { "title": "1-2-1", "key": "1-2-1" },\n                { "title": "1-2-2", "key": "1-2-2" },\n                { "title": "1-2-3", "key": "1-2-3" }\n            ]\n        }, \n        {\n            "title": "1-3",\n            "key": "1-3"\n        }\n    ]\n  }, \n  {\n    "title": "2",\n    "key": "2",\n    "disabled": "true",\n    "children": [\n        { "title": "2-1", "key": "2-1" },\n        { "title": "2-2", "key": "2-2" },\n        { "title": "2-3", "key": "2-3" }\n    ]\n  }, \n  {\n    "title": "3",\n    "key": "3"\n  }]\n')])])]),n("p",[e._v("接口：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const Mock = require('mockjs')\n\nMock.mock('/tree', 'get', require('./json/tree.json'))\n")])])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("到此就完成了树形控件的生成，需求部分都已经满足。如果通过以上代码片段不能明白的话，可以在我的github上找到源码。欢迎来访，欢迎Star~"),n("br"),e._v("\nhttps://github.com/Gesj-yean/vue-demo-collection")]),e._v(" "),n("h2",{attrs:{id:"更多推荐"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更多推荐"}},[e._v("#")]),e._v(" 更多推荐")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://juejin.im/post/1",target:"_blank",rel:"noopener noreferrer"}},[e._v("实现基于Vue的Dialog对话框组件"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/6844903972570955790",target:"_blank",rel:"noopener noreferrer"}},[e._v("实现基于Vue的Pagination分页器组件"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/6844904083124404232",target:"_blank",rel:"noopener noreferrer"}},[e._v("利用better-scroll实现Vue轮播图组件"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);