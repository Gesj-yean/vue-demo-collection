(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{748:function(e,a,t){"use strict";t.r(a);var r=t(58),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"基本知识-flow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本知识-flow"}},[e._v("#")]),e._v(" 基本知识：Flow")]),e._v(" "),t("h2",{attrs:{id:"静态类型检查工具-flow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态类型检查工具-flow"}},[e._v("#")]),e._v(" 静态类型检查工具 Flow")]),e._v(" "),t("p",[t("code",[e._v("Javascript")]),e._v(" 是动态类型语言。静态类型语言 vs 动态类型语言：静态类型语言（statically-typed languages）会在编译时（compile time）进行类型检查，而动态语言（dynamically-typed）则是在运行时进行类型检查（runtime）。")]),e._v(" "),t("p",[e._v("什么是类型检查？")]),e._v(" "),t("p",[e._v("类型检查会强制确保你的变量类型和定义时的类型相符合。静态类型检查会在编译时就检查你的类型是否正确，如果不正确则始终通不过编译。而动态类型检查是在程序运行了一次时才会发现错误，也就是说有错误也可以通过编译。")]),e._v(" "),t("p",[e._v("用什么工具检查？")]),e._v(" "),t("p",[t("code",[e._v("Flow")]),e._v(" 和 "),t("code",[e._v("Typescript")]),e._v(" 。对于 "),t("code",[e._v("Flow")]),e._v(" 需要在文件头部加入 "),t("code",[e._v("@flow")]),e._v("，对于 "),t("code",[e._v("Typescript")]),e._v(" 需要将文件后缀有由 "),t("code",[e._v(".js")]),e._v(" 改成 "),t("code",[e._v(".ts``。Flow")]),e._v(" 是检查库，而 "),t("code",[e._v("Typescript")]),e._v(" 是编译器。")]),e._v(" "),t("h2",{attrs:{id:"使用-flow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-flow"}},[e._v("#")]),e._v(" 使用 Flow")]),e._v(" "),t("p",[e._v("我选择基于 "),t("code",[e._v("npm + babel")]),e._v(" 来 "),t("a",{attrs:{href:"https://flow.org/en/docs/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装 Flow"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("第一步需要安装 "),t("code",[e._v("babel")]),e._v(" 的一些包： "),t("code",[e._v("@babel/core")]),e._v(" "),t("code",[e._v("@babel/cli")]),e._v(" "),t("code",[e._v("@babel/preset-flow")]),e._v("。因为 "),t("code",[e._v("JavaScript")]),e._v(" 是不支持 "),t("code",[e._v("Flow")]),e._v(" 语法的，所以在编译时需要使用 "),t("code",[e._v("@babel/preset-flow")]),e._v(" 把这些 "),t("code",[e._v("Flow")]),e._v(" 代码去除。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install --save-dev @babel/core @babel/cli @babel/preset-flow\n")])])]),t("p",[e._v("接着修改 "),t("code",[e._v(".babelrc")]),e._v(" 文件，添加代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "presets": ["@babel/preset-flow"]\n}\n')])])]),t("p",[e._v("第二步安装 "),t("code",[e._v("Flow")]),e._v("，"),t("code",[e._v("--save-dev")]),e._v(" 可以保证只在开发环境下使用 "),t("code",[e._v("Flow")]),e._v(" 来检查你的代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install --save-dev flow-bin\n")])])]),t("p",[e._v("添加 "),t("code",[e._v("Flow script")]),e._v(" 到 "),t("code",[e._v("package.json")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "name": "my-flow-project",\n  "version": "1.0.0",\n  "devDependencies": {\n    "flow-bin": "^0.160.0"\n  },\n  "scripts": {\n    "flow": "flow"\n  }\n}\n')])])]),t("p",[e._v("在项目下运行命令来初始化 "),t("code",[e._v("Flow")]),e._v(" ，生成配置文件 "),t("code",[e._v(".flowconfig")]),e._v("。关于配置文件的文档，可以查看 "),t("a",{attrs:{href:"https://flow.org/en/docs/config/",target:"_blank",rel:"noopener noreferrer"}},[e._v("如何配置 Flow"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm run flow init\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[ignore] // 忽略检查的文件\n\n[include] // 需要检查的文件\n\n[libs] // 库定义，默认在 flow-typed 文件夹下。Vue 配置的是 Flow，表示库定义都在 Flow 文件夹内。\n\n[lints] // 一些代码中不符合规范代码的报错配置\n\n[options] // 一些配置选项\n\n[strict] // 官网没找到说明。。\n")])])]),t("p",[e._v("第三步使用 "),t("code",[e._v("npm run flow")]),e._v(" 就可以运行 "),t("code",[e._v("Flow")]),e._v("，查看是否有报错了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm run flow\n")])])]),t("p",[e._v("👇👇👇")]),e._v(" "),t("p",[e._v("No errors!")]),e._v(" "),t("p",[e._v("接下来就可以为自己的代码添加 "),t("a",{attrs:{href:"https://flow.org/en/docs/types/",target:"_blank",rel:"noopener noreferrer"}},[e._v("类型注释"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[e._v("#")]),e._v(" 参考文档")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/bda750e2d15e",target:"_blank",rel:"noopener noreferrer"}},[e._v("为什么要在javascript中进行静态类型检查.Part1[译]"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://flow.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flow 文档"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=s.exports}}]);